// <auto-generated />
using System;
using DragoTactical.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DragoTactical.Migrations
{
    [DbContext(typeof(DragoTacticalDbContext))]
    [Migration("20251016182505_AddServiceTitle")]
    partial class AddServiceTitle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("DragoTactical.Models.Category", b =>
            {
                b.Property<int>("CategoryId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("CategoryName")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("TEXT");

                b.HasKey("CategoryId")
                    .HasName("PK_Category");

                b.ToTable("Category", (string)null);

                b.HasData(
                    new
                    {
                        CategoryId = 1,
                        CategoryName = "Physical Service"
                    },
                    new
                    {
                        CategoryId = 2,
                        CategoryName = "Cybersecurity Service"
                    });
            });

            modelBuilder.Entity("DragoTactical.Models.FormSubmission", b =>
            {
                b.Property<int>("SubmissionId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("CompanyName")
                    .HasMaxLength(255)
                    .HasColumnType("TEXT");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("TEXT");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("TEXT");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("TEXT");

                b.Property<string>("Location")
                    .HasMaxLength(255)
                    .HasColumnType("TEXT");

                b.Property<string>("Message")
                    .HasColumnType("TEXT");

                b.Property<string>("PhoneNumber")
                    .HasMaxLength(50)
                    .HasColumnType("TEXT");

                b.Property<int?>("ServiceId")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("SubmissionDate")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                b.HasKey("SubmissionId")
                    .HasName("PK_FormSubmission");

                b.HasIndex("ServiceId");

                b.ToTable("FormSubmission", (string)null);
            });

            modelBuilder.Entity("DragoTactical.Models.Service", b =>
            {
                b.Property<int>("ServiceId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<int>("CategoryId")
                    .HasColumnType("INTEGER");

                b.Property<string>("Description")
                    .HasMaxLength(1000)
                    .HasColumnType("TEXT");

                b.Property<string>("ServiceName")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("TEXT");

                b.Property<string>("Title")
                    .HasMaxLength(255)
                    .HasColumnType("TEXT");

                b.HasKey("ServiceId")
                    .HasName("PK_Services");

                b.HasIndex("CategoryId");

                b.ToTable("Services", (string)null);

                b.HasData(
                    new
                    {
                        ServiceId = 1,
                        CategoryId = 1,
                        Description = "We identify your vulnerabilities before a threat does. Our experts conduct thorough assessments of your property and procedures to pinpoint risks and provide a clear, actionable plan to strengthen your defenses.",
                        ServiceName = "Risk Analysis & Security Audits",
                        Title = "Risk Analysis & Security Audits"
                    },
                    new
                    {
                        ServiceId = 2,
                        CategoryId = 1,
                        Description = "Professional, licensed and highly-trained officers whose presence acts as a deterrent and allows for immediate response to security incidents. Includes site security and specialized close-protection for high-profile individuals.",
                        ServiceName = "On-Site Security Personnel / VIP Protection",
                        Title = "On-Site Security Personnel / VIP Protection"
                    },
                    new
                    {
                        ServiceId = 3,
                        CategoryId = 1,
                        Description = "Design, installation, and maintenance of CCTV and video analytics solutions that enable continuous monitoring, evidence recording, real-time observation, and post-incident investigations.",
                        ServiceName = "Surveillance Systems",
                        Title = "Surveillance Systems"
                    },
                    new
                    {
                        ServiceId = 4,
                        CategoryId = 1,
                        Description = "Electronic keycards, biometrics, and tailored controls to secure entry points, manage visitor flow, and protect sensitive areas across your facilities.",
                        ServiceName = "Access Control Solutions",
                        Title = "Access Control Solutions"
                    },
                    new
                    {
                        ServiceId = 5,
                        CategoryId = 1,
                        Description = "Integrated intrusion detection that triggers immediate alerts for breaches, fires, or emergencies, with options for linkage to rapid response teams or local authorities.",
                        ServiceName = "Alarm & Emergency Response Systems",
                        Title = "Alarm and Emergency Response Systems"
                    },
                    new
                    {
                        ServiceId = 6,
                        CategoryId = 1,
                        Description = "Robust first-line defenses including fencing, bollards, gate systems, and patrols to protect property boundaries and vehicle assets from unauthorized access.",
                        ServiceName = "Vehicle & Perimeter Security",
                        Title = "Vehicle & Perimeter Security"
                    },
                    new
                    {
                        ServiceId = 7,
                        CategoryId = 1,
                        Description = "Strategic guidance from industry experts to analyze your unique challenges and develop comprehensive, long-term strategies that protect people, assets, and reputation.",
                        ServiceName = "Security Consulting",
                        Title = "Security Consulting"
                    },
                    new
                    {
                        ServiceId = 8,
                        CategoryId = 1,
                        Description = "End-to-end delivery of security installations—from concept to completion—ensuring on-time, on-budget projects seamlessly integrated with your operations.",
                        ServiceName = "Project Management",
                        Title = "Project Management"
                    },
                    new
                    {
                        ServiceId = 9,
                        CategoryId = 2,
                        Description = "Comprehensive identification of digital risks across networks, applications, and cloud assets with prioritized remediation plans to reduce exploitability.",
                        ServiceName = "Risk Assessment and Vulnerability Testing",
                        Title = "Risk Assessment and Vulnerability Testing"
                    },
                    new
                    {
                        ServiceId = 10,
                        CategoryId = 2,
                        Description = "Segmented architectures, next‑gen firewalls, secure remote access, and continuous monitoring to prevent, detect, and contain network-borne threats.",
                        ServiceName = "Network Security",
                        Title = "Network Security"
                    },
                    new
                    {
                        ServiceId = 11,
                        CategoryId = 2,
                        Description = "Encryption at rest and in transit, key management, data loss prevention, and governance controls to safeguard sensitive information throughout its lifecycle.",
                        ServiceName = "Data Protection & Encryption",
                        Title = "Data Protection & Encryption"
                    },
                    new
                    {
                        ServiceId = 12,
                        CategoryId = 2,
                        Description = "24/7 response playbooks, triage, containment, forensics, and recovery to minimize impact and accelerate safe restoration after cyber incidents.",
                        ServiceName = "Incident Response and Threat Mitigation",
                        Title = "Incident Response and Threat Mitigation"
                    },
                    new
                    {
                        ServiceId = 13,
                        CategoryId = 2,
                        Description = "Realistic adversary simulations that uncover exploitable weaknesses in web, infrastructure, and cloud, with actionable fixes mapped to risk.",
                        ServiceName = "Penetration Testing & Ethical Hacking",
                        Title = "Penetration Testing & Ethical Hacking"
                    },
                    new
                    {
                        ServiceId = 14,
                        CategoryId = 2,
                        Description = "Role-based training and phishing simulations to reduce human-factor risk and build a sustained security culture across the organization.",
                        ServiceName = "Employee Training and Awareness",
                        Title = "Employee Training and Awareness"
                    },
                    new
                    {
                        ServiceId = 15,
                        CategoryId = 2,
                        Description = "Secure cloud architectures, CSPM, IAM hardening, and workload protections to prevent misconfigurations and enforce least privilege in multi-cloud.",
                        ServiceName = "Cloud Security",
                        Title = "Cloud Security"
                    },
                    new
                    {
                        ServiceId = 16,
                        CategoryId = 2,
                        Description = "Ongoing monitoring, threat detection, and executive‑level security leadership as-a-service to continuously improve posture and meet compliance.",
                        ServiceName = "Managed Security Services (MSSP) - Virtual Cyber Assistant / VCISO",
                        Title = "Managed Security Services (MSSP) - Virtual Cyber Assistant / VCISO"
                    });
            });

            modelBuilder.Entity("DragoTactical.Models.FormSubmission", b =>
            {
                b.HasOne("DragoTactical.Models.Service", "Service")
                    .WithMany()
                    .HasForeignKey("ServiceId")
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_FormSubmission_Services");

                b.Navigation("Service");
            });

            modelBuilder.Entity("DragoTactical.Models.Service", b =>
            {
                b.HasOne("DragoTactical.Models.Category", "Category")
                    .WithMany("Services")
                    .HasForeignKey("CategoryId")
                    .IsRequired()
                    .HasConstraintName("FK_Services_Category");

                b.Navigation("Category");
            });

            modelBuilder.Entity("DragoTactical.Models.Category", b =>
            {
                b.Navigation("Services");
            });
#pragma warning restore 612, 618
        }
    }
}


