// <auto-generated />
using System;
using DragoTactical.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DragoTactical.Migrations
{
    [DbContext(typeof(DragoTacticalDbContext))]
    [Migration("20251016150523_AddServiceDescription")]
    partial class AddServiceDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("DragoTactical.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId")
                        .HasName("PK_Category");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Physical Service"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Cybersecurity Service"
                        });
                });

            modelBuilder.Entity("DragoTactical.Models.FormSubmission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("SubmissionId")
                        .HasName("PK_FormSubmission");

                    b.HasIndex("ServiceId");

                    b.ToTable("FormSubmission", (string)null);
                });

            modelBuilder.Entity("DragoTactical.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ServiceId")
                        .HasName("PK_Services");

                    b.HasIndex("CategoryId");

                    b.ToTable("Services", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            CategoryId = 1,
                            ServiceName = "Risk Analysis & Security Audits"
                        },
                        new
                        {
                            ServiceId = 2,
                            CategoryId = 1,
                            ServiceName = "On-Site Security Personnel / VIP Protection"
                        },
                        new
                        {
                            ServiceId = 3,
                            CategoryId = 1,
                            ServiceName = "Surveillance Systems"
                        },
                        new
                        {
                            ServiceId = 4,
                            CategoryId = 1,
                            ServiceName = "Access Control Solutions"
                        },
                        new
                        {
                            ServiceId = 5,
                            CategoryId = 1,
                            ServiceName = "Alarm & Emergency Response Systems"
                        },
                        new
                        {
                            ServiceId = 6,
                            CategoryId = 1,
                            ServiceName = "Vehicle & Perimeter Security"
                        },
                        new
                        {
                            ServiceId = 7,
                            CategoryId = 1,
                            ServiceName = "Security Consulting"
                        },
                        new
                        {
                            ServiceId = 8,
                            CategoryId = 1,
                            ServiceName = "Project Management"
                        },
                        new
                        {
                            ServiceId = 9,
                            CategoryId = 2,
                            ServiceName = "Risk Assessment and Vulnerability Testing"
                        },
                        new
                        {
                            ServiceId = 10,
                            CategoryId = 2,
                            ServiceName = "Network Security"
                        },
                        new
                        {
                            ServiceId = 11,
                            CategoryId = 2,
                            ServiceName = "Data Protection & Encryption"
                        },
                        new
                        {
                            ServiceId = 12,
                            CategoryId = 2,
                            ServiceName = "Incident Response and Threat Mitigation"
                        },
                        new
                        {
                            ServiceId = 13,
                            CategoryId = 2,
                            ServiceName = "Penetration Testing & Ethical Hacking"
                        },
                        new
                        {
                            ServiceId = 14,
                            CategoryId = 2,
                            ServiceName = "Employee Training and Awareness"
                        },
                        new
                        {
                            ServiceId = 15,
                            CategoryId = 2,
                            ServiceName = "Cloud Security"
                        },
                        new
                        {
                            ServiceId = 16,
                            CategoryId = 2,
                            ServiceName = "Managed Security Services (MSSP) - Virtual Cyber Assistant / VCISO"
                        });
                });

            modelBuilder.Entity("DragoTactical.Models.FormSubmission", b =>
                {
                    b.HasOne("DragoTactical.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_FormSubmission_Services");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DragoTactical.Models.Service", b =>
                {
                    b.HasOne("DragoTactical.Models.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Services_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DragoTactical.Models.Category", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
