@model DragoTactical.Models.ContactUsViewModel
@{
    ViewData["Title"] = "Contact Us";
}

<div class="dt-contact dt-full-bleed">
    <div class="dt-contact-top-gradient"></div>
    <div class="dt-contact-pattern-right"></div>

    <div class="dt-contact-content container-fluid">
        <div class="dt-contact-grid">
            <div class="dt-contact-heading">
                <h1 class="dt-contact-title">Contact Us</h1>
                <p class="dt-contact-subtitle">Let us reach out</p>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success" role="alert">@TempData["SuccessMessage"]</div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger" role="alert">@TempData["ErrorMessage"]</div>
            }

            <!-- CSRF protected -->
            <form class="dt-contact-form" method="post" asp-controller="Contact" asp-action="Submit" id="contactForm" novalidate>
                @Html.AntiForgeryToken()
                <div class="row g-3">
                    <div class="col-12">
                        <input class="form-control dt-input" name="FirstName" type="text" placeholder="First Name*" required
                               pattern="^[A-Za-z\s]{2,50}$" />
                        <div class="invalid-feedback">First name is required (letters only, 2-50).</div>
                    </div>
                    <div class="col-12">
                        <input class="form-control dt-input" name="LastName" type="text" placeholder="Last Name*" required
                               pattern="^[A-Za-z\s]{2,50}$" />
                        <div class="invalid-feedback">Last name is required (letters only, 2-50).</div>
                    </div>
                    <div class="col-12">
                        <input class="form-control dt-input" name="Email" type="email" placeholder="Email*" required />
                        <div class="invalid-feedback">Please enter a valid email address.</div>
                    </div>
                    <div class="col-12">
                        <input class="form-control dt-input" name="PhoneNumber" type="tel" placeholder="Phone*" required
                               pattern="^\+?[0-9\s\-]{7,15}$" title="Enter a valid phone number" />
                        <div class="invalid-feedback">Please enter a valid phone number.</div>
                    </div>
                    <div class="col-12">
                        <input class="form-control dt-input" name="CompanyName" type="text" placeholder="Company name (Optional)"
                               pattern="^[^<>]{0,100}$" title="No invalid characters allowed" />
                        <div class="invalid-feedback">No angle brackets allowed.</div>
                    </div>
                    <div class="col-12">
                        <select class="form-select dt-input" name="Location" required>
                            <option value="" disabled selected>Location*</option>
                            <option value="South Africa">South Africa</option>
                            <option value="United Kingdom">United Kingdom</option>
                            <option value="United States">United States</option>
                            <option value="Europe">Europe</option>
                            <option value="Other">Other</option>
                        </select>
                        <div class="invalid-feedback">Location is required.</div>
                    </div>
                    <div class="col-12">
                        <select class="form-select dt-input" name="ServiceId" required>
                            <option value="" disabled selected>Services of Interest*</option>
                            @if (Model?.AllServices != null)
                            {
                                @foreach (var category in Model.AllServices.GroupBy(s => s.Category.CategoryName))
                                {
                                    <optgroup label="@category.Key">
                                        @foreach (var service in category)
                                        {
                                            <option value="@service.ServiceId">@service.ServiceName</option>
                                        }
                                    </optgroup>
                                }
                            }
                            <option value="0">Other</option>
                        </select>
                        <div class="invalid-feedback">Please select a service.</div>
                    </div>
                    <div class="col-12">
                        <textarea class="form-control dt-input" name="Message" rows="4" placeholder="Message – Please provide a description of your enquiry"
                                  required pattern="^[^<>]{10,1000}$"></textarea>
                        <div class="invalid-feedback">Message is required (10-1000 chars, no angle brackets).</div>
                    </div>
                </div>

                <div class="mt-3 d-flex justify-content-end">
                    <button type="submit" class="btn dt-btn-submit">Submit*</button>
                </div>
            </form>
        </div>
    </div>

    <div class="dt-contact-blob" aria-hidden="true">
        <img src="~/images/BlueBall.png" alt="" />
    </div>
</div>

<!-- Front-end validation (single-icon, inline messages; prevents layout shift) -->
<script>
    (function () {
        const form = document.getElementById('contactForm');
        const sanitize = (v) => v.replace(/[<>]/g, '').trim();

        const validators = {
            FirstName: (v) => /^[A-Za-z\s]{2,50}$/.test(v),
            LastName: (v) => /^[A-Za-z\s]{2,50}$/.test(v),
            Email: (v) => /.+@@.+\..+/.test(v),
            PhoneNumber: (v) => /^\+?[0-9\s\-]{7,15}$/.test(v),
            CompanyName: (v) => /^[^<>]{0,100}$/.test(v || ''),
            Location: (v) => !!v,
            ServiceId: (v) => !!v,
            Message: (v) => /^[^<>]{10,1000}$/.test(v)
        };

        function setInvalid(input, message) {
            input.classList.add('is-invalid');
            const feedback = input.parentElement.querySelector('.invalid-feedback');
            if (feedback) feedback.textContent = message;
        }

        function clearInvalid(input) {
            input.classList.remove('is-invalid');
        }

        let hasSubmittedOnce = false;
        form.addEventListener('submit', function (e) {
            e.preventDefault();
            hasSubmittedOnce = true;
            let allValid = true;

            const fields = form.querySelectorAll('input[name], textarea[name], select[name]');
            fields.forEach(field => {
                field.value = sanitize(field.value);
                clearInvalid(field);

                const name = field.getAttribute('name');
                const val = field.value;
                const ok = validators[name] ? validators[name](val) : true;

                if (!ok) {
                    allValid = false;
                    switch (name) {
                        case 'FirstName': setInvalid(field, 'First name is required (letters only, 2-50).'); break;
                        case 'LastName': setInvalid(field, 'Last name is required (letters only, 2-50).'); break;
                        case 'Email': setInvalid(field, 'Please enter a valid email address.'); break;
                        case 'PhoneNumber': setInvalid(field, 'Please enter a valid phone number.'); break;
                        case 'CompanyName': setInvalid(field, 'No angle brackets allowed.'); break;
                        case 'Location': setInvalid(field, 'Location is required.'); break;
                        case 'ServiceId': setInvalid(field, 'Please select a service.'); break;
                        case 'Message': setInvalid(field, 'Message is required (10-1000 chars, no angle brackets).'); break;
                    }
                }
            });

            if (allValid) {
                form.submit();
            }
        });

        // After first submit attempt, validate as user fixes fields
        form.addEventListener('input', function (e) {
            if (!hasSubmittedOnce) return;
            const target = e.target;
            if (!target || !target.name) return;
            const name = target.getAttribute('name');
            const val = sanitize(target.value);
            target.value = val;
            if (validators[name] && validators[name](val)) {
                clearInvalid(target);
            }
        }, true);
    })();
</script>
